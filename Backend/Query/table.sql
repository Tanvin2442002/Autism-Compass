CREATE TABLE LOG_IN(
    EMAIL VARCHAR2(255) NOT NULL,
    PASSWORD VARCHAR2(255) NOT NULL,
    TYPE VARCHAR2(255) NOT NULL
);

-- LOG_IN TABLE END --
-- CHILD TABLE START --

CREATE TABLE CHILD(
    C_ID VARCHAR2(255) PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    DOB DATE NOT NULL,
    AGE NUMBER,
    CONTACT_NO NUMBER NOT NULL,
    EMAIL VARCHAR2(255) NOT NULL,
    P_EMAIL VARCHAR2(255) NOT NULL,
    CITY VARCHAR2(255) NOT NULL,
    STREET VARCHAR2(255) NOT NULL,
    POSTAL_CODE NUMBER NOT NULL
);

-- CHILD TABLE END
-- PARENT TABLE START

CREATE TABLE PARENT(
    P_ID VARCHAR2(255) PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    DOB DATE NOT NULL,
    AGE NUMBER,
    CONTACT_NO NUMBER NOT NULL,
    EMAIL VARCHAR2(255) NOT NULL,
    CITY VARCHAR2(255) NOT NULL,
    STREET VARCHAR2(255) NOT NULL,
    POSTAL_CODE NUMBER NOT NULL
);

-- PARENT TABLE END
-- TEACHER TABLE START

CREATE TABLE TEACHER(
    T_ID VARCHAR2(255) PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    CONTACT_NO NUMBER NOT NULL,
    EMAIL VARCHAR2(255) NOT NULL,
    INSTITUTION VARCHAR2(255) NOT NULL
);

-- TEACHER TABLE END
-- HEALTH_PROFESSIONAL TABLE START

-- Create the object type for Address
CREATE OR REPLACE TYPE ADDR AS OBJECT(
  CITY VARCHAR2(255),
  STREET VARCHAR2(255),
  POSTAL_CODE NUMBER
);

-- Create the table using the object type ADDR
CREATE TABLE HEALTH_PROFESSIONAL(
    H_ID VARCHAR2(255) PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    CONTACT_NO NUMBER NOT NULL,
    EMAIL VARCHAR2(255) NOT NULL,
    DEGREE VARCHAR2(255) NOT NULL,
    FIELD_OF_SPEC VARCHAR2(255) NOT NULL,
    NAME_OF_HOSPITAL VARCHAR2(255) NOT NULL,
    VISIT_TIME VARCHAR2(255) NOT NULL,  
    ADDRESS ADDR  -- Object type as a column
);
/


-- HEALTH_PROFESSIONAL TABLE END
-- COURSES TABLE START

CREATE TABLE COURSES(
    COURSE_CODE VARCHAR2(255) PRIMARY KEY,
    COURSE_NAME VARCHAR2(255) NOT NULL
);

-- COURSES TABLE END
--THERAPY TABLE START

CREATE TABLE THERAPY(
    TH_ID VARCHAR2(255) PRIMARY KEY,
    THERAPY_TYPE VARCHAR2(255) NOT NULL,
    THERAPY_DESCRIPTION VARCHAR2(255) NOT NULL
);

-- THERAPY TABLE END
-- THERAPY ORG TABLE START

CREATE TABLE THERAPY_ORG(
    THO_ID VARCHAR2(255) PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    CONTACT_NO NUMBER NOT NULL,
    EMAIL VARCHAR2(255) NOT NULL,
    CITY VARCHAR2(255) NOT NULL,
    STREET VARCHAR2(255) NOT NULL,
    POSTAL_CODE NUMBER NOT NULL
);

-- THERAPY ORG TABLE END
-- DISORDER TABLE START

CREATE TABLE DISORDER(
    D0_ID VARCHAR2(255) PRIMARY KEY,
    TYPE VARCHAR2(255) NOT NULL,
    DESCRIPTION VARCHAR2(255) NOT NULL
);

-- DISORDER TABLE END
-- DELIVERY TABLE START

CREATE TABLE DELIVERY(
    D_ID VARCHAR2(255) PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    CITY VARCHAR2(255) NOT NULL,
    STREET VARCHAR2(255) NOT NULL,
    POSTAL_CODE NUMBER NOT NULL
);

-- DELIVERY TABLE END
-- BILLS TABLE START

CREATE TABLE BILLS(
    B_ID VARCHAR2(255) PRIMARY KEY,
    AMOUNT NUMBER NOT NULL
);

-- BILLS TABLE END
-- PRODUCT TABLE START

CREATE TABLE PRODUCT(
    PR_ID VARCHAR2(255) PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    SRC VARCHAR2(255) NOT NULL,
    PRICE NUMBER NOT NULL,
    QUANTITY NUMBER NOT NULL,
    DESCRIPTION VARCHAR2(255) NOT NULL
);

-- PRODUCT TABLE END
--
--CREATE FORIEGN KEY TABLES --
--
-- ASSIGNED TABLE START

CREATE TABLE ASSIGNED(
    COURSE_CODE VARCHAR2(255) NOT NULL,
    T_ID VARCHAR2(255) NOT NULL,
    PRIMARY KEY(COURSE_CODE, T_ID),
    FOREIGN KEY(COURSE_CODE) REFERENCES COURSES(COURSE_CODE),
    FOREIGN KEY(T_ID) REFERENCES TEACHER(T_ID)
);

-- ASSIGNED TABLE END
-- THERAPY_HAS_THEAPYORG TABLE START

CREATE TABLE THERAPY_HAS_THEAPYORG(
    TH_ID VARCHAR2(255) NOT NULL,
    THO_ID VARCHAR2(255) NOT NULL,
    PRIMARY KEY(TH_ID, THO_ID),
    FOREIGN KEY(TH_ID) REFERENCES THERAPY(TH_ID),
    FOREIGN KEY(THO_ID) REFERENCES THERAPY_ORG(THO_ID)
);

-- THERAPY_HAS_THEAPYORG TABLE END
-- ENROLLS TABLE START

CREATE TABLE ENROLLS(
    C_ID VARCHAR2(255) NOT NULL,
    COURSE_CODE VARCHAR2(255) NOT NULL,
    PRIMARY KEY(C_ID, COURSE_CODE),
    FOREIGN KEY(C_ID) REFERENCES CHILD(C_ID),
    FOREIGN KEY(COURSE_CODE) REFERENCES COURSES(COURSE_CODE)
);

-- ENROLLS TABLE END
-- BOOKS TABLE START

CREATE TABLE BOOKS(
    C_ID VARCHAR2(255),
    TH_ID VARCHAR2(255) NOT NULL,
    P_ID VARCHAR2(255),
    THO_ID VARCHAR2(255) NOT NULL,
    BOOKING_DATE DATE NOT NULL,
    PRIMARY KEY(TH_ID, THO_ID, C_ID, P_ID),
    FOREIGN KEY(C_ID) REFERENCES CHILD(C_ID),
    FOREIGN KEY(TH_ID) REFERENCES THERAPY(TH_ID),
    FOREIGN KEY(P_ID) REFERENCES PARENT(P_ID),
    FOREIGN KEY(THO_ID) REFERENCES THERAPY_ORG(THO_ID)
);


-- BOOKS TABLE END
-- SUGGESTS TABLE START

CREATE TABLE SUGGESTS(
    C_ID VARCHAR2(255) NOT NULL,
    H_ID VARCHAR2(255) NOT NULL,
    P_ID VARCHAR2(255) NOT NULL,
    PRIMARY KEY(C_ID, H_ID, P_ID),
    FOREIGN KEY(C_ID) REFERENCES CHILD(C_ID),
    FOREIGN KEY(H_ID) REFERENCES HEALTH_PROFESSIONAL(H_ID),
    FOREIGN KEY(P_ID) REFERENCES PARENT(P_ID)
);

-- SUGGESTS TABLE END
-- CHILD_HAS_DISORDER TABLE START

CREATE TABLE CHILD_HAS_DISORDER(
    C_ID VARCHAR2(255) NOT NULL,
    D0_ID VARCHAR2(255) NOT NULL,
    PRIMARY KEY(C_ID, D0_ID),
    FOREIGN KEY(C_ID) REFERENCES CHILD(C_ID),
    FOREIGN KEY(D0_ID) REFERENCES DISORDER(D0_ID)
);

-- CHILD_HAS_DISORDER TABLE END
-- PARENT_HAS_CHILD TABLE START

CREATE TABLE PARENT_HAS_CHILD(
    P_ID VARCHAR2(255) NOT NULL,
    C_ID VARCHAR2(255) NOT NULL,
    PRIMARY KEY(P_ID, C_ID),
    FOREIGN KEY(P_ID) REFERENCES PARENT(P_ID),
    FOREIGN KEY(C_ID) REFERENCES CHILD(C_ID)
);

-- PARENT_HAS_CHILD TABLE END
-- CONSULTS TABLE START

CREATE TABLE CONSULTS(
    P_ID VARCHAR2(255) NOT NULL,
    H_ID VARCHAR2(255) NOT NULL,
    C_ID VARCHAR2(255) NOT NULL,
    PRIMARY KEY(P_ID, H_ID, C_ID),
    FOREIGN KEY(P_ID) REFERENCES PARENT(P_ID),
    FOREIGN KEY(H_ID) REFERENCES HEALTH_PROFESSIONAL(H_ID),
    FOREIGN KEY(C_ID) REFERENCES CHILD(C_ID)
);

TRUNCATE TABLE CONSULTS;


-- CONSULTS TABLE END
-- GET TABLE START

CREATE TABLE GET(
    P_ID VARCHAR2(255) NOT NULL,
    D_ID VARCHAR2(255) NOT NULL,
    DELIVERY_DATE DATE NOT NULL,
    PRIMARY KEY(P_ID, D_ID),
    FOREIGN KEY(P_ID) REFERENCES PARENT(P_ID),
    FOREIGN KEY(D_ID) REFERENCES DELIVERY(D_ID)
);

-- GET TABLE END
-- PAYS TABLE START

CREATE TABLE PAYS(
    P_ID VARCHAR2(255) NOT NULL,
    B_ID VARCHAR2(255) NOT NULL,
    PRIMARY KEY(P_ID, B_ID),
    FOREIGN KEY(P_ID) REFERENCES PARENT(P_ID),
    FOREIGN KEY(B_ID) REFERENCES BILLS(B_ID)
);

-- PAYS TABLE END
-- PURCHASES TABLE START

CREATE TABLE PURCHASES(
    P_ID VARCHAR2(255) NOT NULL,
    PR_ID VARCHAR2(255) NOT NULL,
    PURCHASE_DATE DATE NOT NULL,
    PRIMARY KEY(P_ID, PR_ID),
    FOREIGN KEY(P_ID) REFERENCES PARENT(P_ID),
    FOREIGN KEY(PR_ID) REFERENCES PRODUCT(PR_ID)
);

-- PURCHASES TABLE END
-- ASSIGNED_TO TABLE START

CREATE TABLE ASSIGNED_TO(
    B_ID VARCHAR2(255) NOT NULL,
    D_ID VARCHAR2(255) NOT NULL,
    PRIMARY KEY(B_ID, D_ID),
    FOREIGN KEY(B_ID) REFERENCES BILLS(B_ID),
    FOREIGN KEY(D_ID) REFERENCES DELIVERY(D_ID)
);

-- ASSIGNED_TO TABLE END
-- BILLS_FOR_PRODUCT TABLE START

CREATE TABLE BILLS_FOR_PRODUCT(
    B_ID VARCHAR2(255) NOT NULL,
    PR_ID VARCHAR2(255) NOT NULL,
    PRIMARY KEY(B_ID, PR_ID),
    FOREIGN KEY(B_ID) REFERENCES BILLS(B_ID),
    FOREIGN KEY(PR_ID) REFERENCES PRODUCT(PR_ID)
);

-- BILLS_FOR_PRODUCT TABLE END
--
-- TABLE CRATION END
--
-- CONVERT DATE TO AGE IN CHILD TABLE --

CREATE OR REPLACE TRIGGER TRG_UPDATE_AGE BEFORE
INSERT OR UPDATE
ON CHILD FOR EACH ROW BEGIN :NEW.AGE := FLOOR(MONTHS_BETWEEN(SYSDATE, :NEW.DOB) / 12); END;
-- CONVERT DATE TO AGE IN PARENT TABLE -- 

CREATE OR REPLACE TRIGGER P_TRG_UPDATE_AGE BEFORE
INSERT OR UPDATE
ON PARENT FOR EACH ROW BEGIN :NEW.AGE := FLOOR(MONTHS_BETWEEN(SYSDATE, :NEW.DOB) / 12); END;
--

--ADDING NEW COLUMN TO PURCHASES TABLE--
ALTER TABLE PURCHASES
ADD (AMOUNT NUMBER);
commit;

ALTER TABLE PURCHASES
ADD (QUANTITY NUMBER);
commit;

--ADDING VIRTUAL COLUMN TO PURCHASES TABLE--
ALTER TABLE PURCHASES
ADD (PRICE_WITH_VAT AS (AMOUNT + AMOUNT * 0.05));
COMMIT;
--END--

--DROPING COLUMN FROM DELIVERY TABLE--
ALTER TABLE DELIVERY
DROP COLUMN POSTAL_CODE;
--END--

--ADDING NEW COLUMN TO DELIVERY TABLE--
ALTER TABLE DELIVERY
ADD(HOUSE_NO VARCHAR2(20) );
COMMIT;
--END--

--INSERTING DATA INTO DELIVERY TABLE--
INSERT INTO DELIVERY (D_ID, NAME, CITY, STREET, HOUSE_NO) VALUES ('D_01','Arif Abdullah','Dhaka','Kalshi','274/A');
commit;
--END--

--MODIFYING GET TABLE--
ALTER TABLE GET
ADD (CITY VARCHAR2(255))
ADD (STREET VARCHAR2(255))
ADD (HOUSE_NO VARCHAR2(255));
COMMIT;
--END--
